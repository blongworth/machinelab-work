---
title: "Met and status data"
format: html
editor: source
---

```{r}
library(tidyverse)
library(arrow)
library(dygraphs)
library(suntools)

data_dir <- "data/processed/surface"
```

# Met data

```{r}
ds <- open_dataset(file.path(data_dir, "lecs_met.parquet"))
```

Dimensions

```{r}
names(ds)
nrow(ds)
```

```{r}
ds |> 
  summarize(time_min = min(timestamp), 
            time_max = max(timestamp) 
  ) |> 
  collect()
```

Duplicates?

```{r}
ds |> 
  group_by(timestamp) |> 
  summarize(n = n()) |> 
  filter(n > 1) |> 
  collect()
```

## PAR

PAR looks pretty questionable. 
Is noise clouds, electronic issues or something else.

TODO: Calibrate by codeployment with radiometer.
TODO: Denoise?
TODO: Test system (codeployment will be initial test)

```{r, exec = FALSE}
ds |> 
  select(timestamp, PAR) |> 
  collect() |> 
  dygraph()
```


calculate potential insolation curve to help correct timestamps

```{r}
crds <- matrix(c(-70.7003, 41.51875), nrow = 1)

# calculate predicted par from solar azimuth
pred_par <- function(crds, timestamp) {
  altitude <- solarpos(crds, timestamp)[,2]
  altitude <- replace(altitude, altitude <= 0, 0)
  insolation = sin(altitude * pi / 180)
  par = 0.45 * insolation * 4.6 * 1000
  par
}    

par_10m <- ds |> 
  rename(par = PAR) |> 
  mutate(timestamp = floor_date(timestamp, "10min")) |>
  group_by(timestamp) |>
  summarize(par = mean(par),
            wind_speed = mean(wind_speed),
            wind_dir = mean(wind_dir)) |>
  ungroup() |>
  collect() |> 
  mutate(par = par/117 - 25, # approximate par calibration umol/m2/s
         pred_par = pred_par(crds, timestamp))
```


```{r}
par_10m |> 
  select(timestamp, par, pred_par) |> 
  collect() |> 
  dygraph(main = "LECS Surface PAR vs predicted PAR",
          ylab = "PAR [Âµmol m<sup>-2</sup> s<sup>-1</sup>]") |> 
  #dySeries("wind_speed", axis = "y2", color = "lightblue", drawPoints = TRUE, strokeWidth = 0) |> 
  dyRangeSelector()
```

```{r}
par_10m |> 
  select(timestamp, par, pred_par) |> 
  filter(timestamp > "2024-08-18",
         timestamp < "2024-08-25") |> 
  collect() |> 
  pivot_longer(cols = c(par, pred_par), names_to = "type", values_to = "par") |> 
  ggplot(aes(timestamp, par, color = type)) + 
    geom_line()
```

### Underwater PAR

```{r}

od_file <- function(file) {
  lecs_read_par_odyssey(file) |> 
    mutate(file = basename(file))
}

par_files <- list.files("data/PAR", full.names = TRUE)

uw_par <- map(par_files, od_file) |> 
  list_rbind() |> 
  mutate(
    timestamp = case_when(
      file == "lecs_par_odyssey_2023-10-05.csv" ~ timestamp + 4 * 3600,
      file == "lecs_par_odyssey_2024-02-28.csv" &
        timestamp < "2023-11-07 00:00:00"       ~ timestamp - 2 * 3600,
      file == "lecs_par_odyssey_2024-02-28.csv" ~ timestamp + 4 * 3600,
      file == "lecs_par_odyssey_2024-09-27.csv" & 
        timestamp < "2024-03-24 00:00:00"       ~ timestamp - 1 * 3600,
      file == "lecs_par_odyssey_2024-09-27.csv" ~ timestamp + 5 * 3600,
    ),
    cal_par = case_when(
      file == "lecs_par_odyssey_2023-10-05.csv" ~ raw_par * 0.15,
      file == "lecs_par_odyssey_2024-02-28.csv" ~ raw_par * 0.2,
      file == "lecs_par_odyssey_2024-09-27.csv" ~ raw_par * 0.11,
    ))

uw_par_10 <- uw_par |> 
  select(timestamp, cal_par) |> 
  mutate(timestamp = floor_date(timestamp, "10min")) |> 
  group_by(timestamp) |> 
  summarize(uw_par = mean(cal_par)) |> 
  mutate(pred_par = pred_par(crds, timestamp))

# par_all <- par_10m |> 
#   full_join(uw_par_10)
```

```{r}
uw_par_10 |> 
  select(timestamp, pred_par, uw_par) |> 
  dygraph() |> 
  dyRangeSelector()
    ```

## Wind

```{r}
ds |> 
  select(timestamp, wind_speed) |> 
  collect() |> 
  dygraph()
```


```{r}
ds |> 
  select(timestamp, wind_dir) |> 
  collect() |> 
  dygraph()
```

# Status

```{r}
status <- open_dataset(file.path(data_dir, "lecs_status.parquet"))
```

filtered with same as adv

```{r}
st_filt <- status |> 
   filter(#!(timestamp > "2023-06-23 13:00:00" & timestamp < "2023-06-26 11:00:00"),
         #!(timestamp > "2023-07-11 12:45:00" & timestamp < "2023-07-20 20:15:00"),
         !(timestamp > "2023-07-24 16:49:00" & timestamp < "2023-07-25 00:15:00"),
         !(timestamp > "2023-08-23 14:15:00" & timestamp < "2023-08-23 16:10:00"),
         !(timestamp > "2023-08-27 07:56:00" & timestamp < "2023-09-11 16:15:00"),
         !(timestamp > "2023-09-15 04:07:00" & timestamp < "2023-10-19 12:25:00"),
         #!(timestamp > "2023-10-19 11:30:00" & timestamp < "2023-10-19 12:25:00"),
         !(timestamp > "2023-12-22 11:45:00" & timestamp < "2023-12-22 12:20:00"),
         !(timestamp > "2024-01-28 00:00:00" & timestamp < "2024-02-08 14:00:00"),
         !(timestamp > "2024-02-13 05:00:00" & timestamp < "2024-03-13 22:00:00"),
         !(timestamp > "2024-03-22 12:35:00" & timestamp < "2024-03-22 13:26:00"),
         !(timestamp > "2024-04-01 11:09:00" & timestamp < "2024-04-01 11:20:00"),
         !(timestamp > "2024-06-03 12:50:00" & timestamp < "2024-06-03 13:45:00"),
         !(timestamp > "2024-06-05 14:50:00" & timestamp < "2024-06-05 15:40:00"),
         !(timestamp > "2024-08-27 10:30:00" & timestamp < "2024-08-27 11:35:00"),
         timestamp < "2024-09-27 10:13:00",
   )
```

Dimensions

```{r}
names(status)
nrow(status)
```

```{r}
status |> 
  summarize(time_min = min(timestamp), 
            time_max = max(timestamp) 
  ) |> 
  collect()
```

Duplicates?

```{r}
ds |> 
  group_by(timestamp) |> 
  summarize(n = n()) |> 
  filter(n > 1) |> 
  collect()
```

minute average

```{r}
# st_min <- status |> 
st_min <- st_filt |> 
  mutate(timestamp = floor_date(timestamp, "minutes")) |> 
  group_by(timestamp) |> 
  summarise(across(!adv_timestamp,
                   ~ mean(.x, na.rm = TRUE))) |> 
  ungroup()
```

## Battery    

```{r}
st_min |> 
  select(timestamp, bat) |> 
  collect() |> 
  dygraph()
```

daily average

```{r}
status |> 
  mutate(timestamp = floor_date(timestamp, "day")) |> 
  group_by(timestamp) |> 
  summarise(across(!adv_timestamp,
                   ~ mean(.x, na.rm = TRUE))) |> 
  ungroup() |> 
  select(timestamp, bat) |> 
  collect() |> 
  dygraph()
```

## IMU

```{r}
st_min |> 
  select(timestamp, pitch, roll) |> 
  collect() |> 
  dygraph() |> 
  dyRangeSelector()
```

```{r}
lander_moves <- c("2023-07-18 17:03:00", 
                  "2023-07-20 18:54:00",
                  "2023-07-24 20:47:00",
                  "2023-08-01 20:09:00",
                  "2023-08-23 20:02:00",
                  "2023-10-19 16:25:00",
                  "2023-12-22 16:45:00",
                  "2024-03-07 15:45:00",
                  "2024-03-22 16:35:00",
                  "2024-03-24 04:00:00",
                  "2024-04-01 15:09:00",
                  "2024-06-03 16:47:00",
                  "2024-06-05 18:50:00",
                  "2024-06-13 16:26:00",
                  "2024-08-27 14:16:00"
                  )
```

```{r}
st_min |> 
  select(timestamp, pitch, roll) |> 
  collect() |> 
  dygraph() |> 
  dyRangeSelector() |> 
  dyEvent(lander_moves)
```

bad IMU data

```{r}
status |> 
  select(timestamp, pitch, roll, heading) |> 
  filter(timestamp > "2023-10-05 00:00:00",
         timestamp < "2023-10-07 00:00:00") |> 
  collect() |> 
  dygraph() |> 
  dyRangeSelector()
```

soundspeed

```{r}
st_min |> 
  select(timestamp, soundspeed) |> 
  collect() |> 
  dygraph() |> 
  dyRangeSelector()
```

## External sensor data


```{r}
dygraph(select(uw_par, timestamp, cal_par))
max(uw_par$timestamp)
```


