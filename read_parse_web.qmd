---
title: "Parse LECS Web"
format: html
editor: source
---

Get and parse data sent to LECS website

# Get Data

```{r}
library(tidyverse)
library(rvest)
library(lubridate)
library(mlabtools)

# time offset in seconds
ts_offset <- 671628945
```

Extract table

```{r}
df <- read_html("https://gems.whoi.edu/LECSrawdata/") |> 
  html_node("table") |> 
  html_table()
```

Add type and line number

```{r, eval=FALSE}
df <- df |> 
  mutate(type = str_match(X1, "\\[\\d+\\]([DMS$]):?")[,2],
         line = str_match(X1, "\\[(\\d+)\\][DMS$]:?")[,2],
         data = str_remove(X1, "\\[\\d+\\][DMS$]:?")) |> 
  select(type, line, data)
```


```{r, eval=FALSE}
for (i in nrow(df)) {
  if (str_starts(df[[i,1]], "\\[\\d+\\]S:")) {
    line <- str_remove(df[[i,1]], "\\[\\d+\\]S:")
    line <- as.integer(unlist(strsplit(line, ",")))
    print(line)
    status_time <- make_datetime(line[6], line[5], line[4], line[1], line[2], line[3])
    print(status_time)
    #i <- i + 1
  }

  if (str_starts(df[[i,1]], "\\[\\d+\\]D:")) {
    df[i,1] <- paste(df[[i,1]], status_time, sep = ",")
  }
}
```

## Met

```{r}
met <- df |> 
  filter(type == "M") |> 
  separate(data, 
           into = c('hour', 'min', 'sec', 'day', 'month', 'year', 'PAR', 'wind_speed', 'wind_dir'), 
           sep = ',') |> 
  mutate(across(3:8, as.integer),
         across(9:11, as.numeric)) |> 
  mutate(timestamp = make_datetime(year, month, day, hour, min, sec, tz = "EDT"))
```

### PAR

```{r}
ggplot(met, aes(timestamp, PAR)) + geom_line()
```

### Wind Speed

```{r}
ggplot(met, aes(timestamp, wind_speed)) + geom_line()
```

### Wind direction

```{r}
ggplot(met, aes(timestamp, wind_dir)) + geom_line()
```

## Status

```{r}
status <- df |> 
  filter(type == "S") |> 
  separate(data, 
           into = c('hour', 'min', 'sec', 'day', 'month', 'year',
                    'adv_min', 'adv_sec', 'adv_day', 
                    'adv_hour', 'adv_year', 'adv_month',
                    'bat', 'soundspeed', 'heading', 'pitch', 
                    'roll', 'temp', 
                    'pump_current', 'pump_voltage', 'pump_power'),
           sep = ',') |>
  mutate(across(3:14, as.integer),
         across(15:23, ~ as.numeric(.x) * .1),
         timestamp = make_datetime(year, month, day, hour, min, sec,
                                   tz = "EDT"),
         adv_timestamp = make_datetime(adv_year, adv_month, adv_day, adv_hour, adv_min, adv_sec, 
                                       tz = "EDT"),
         adv_timestamp_cor = adv_timestamp + ts_offset)

status_qc <- status |> 
  filter(soundspeed > 1450, 
         adv_day < 32, adv_month > 0, adv_month < 13, adv_min < 61, 
         adv_hour < 24, adv_year < 100)
```

### Battery

```{r}
status_qc |> 
  filter(year == 2023, month < 9) |> 
ggplot(aes(timestamp, bat)) + geom_line()
```

## ADV Data

```{r}
adv_data <- df |> 
  filter(type == "D") |> 
  separate(data, 
           into = c('count', 'pressure', 
                    'x_vel', 'y_vel', 'z_vel',
                    'x_amp', 'y_amp', 'z_amp',
                    'x_cor', 'y_cor', 'z_cor',
                    'ana_in', 'ana_in2', 'pH', 
                    'temp', 'oxy'),
           sep = ',') |>
  mutate(across(4:18, as.numeric),
         count = as.integer(count))

adv_data_qc <- adv_data |> 
  filter(count >= 0, count < 256) 
```

### pressure

```{r}
adv_data_qc |> 
  ggplot(aes(1:nrow(adv_data_qc), pressure)) + geom_line()
```

### pH

```{r}
adv_data_qc |> 
  ggplot(aes(1:nrow(adv_data_qc), pH)) +
  geom_line() #+
  #xlim(12000, nrow(adv_data_qc)) +
  #ylim(0, 25000)
```

### Missing data

#### Plot missingness

Still need to take out end and beginning of 200 line send.

```{r}
adv_data <- adv_data |> 
  mutate(missing = case_when(count > 255 | lag(count) > 255 ~ NA_integer_,
                             count > lag(count) ~ count - 1L - lag(count),
                             TRUE ~ 255L + count - lag(count)
                           ))

adv_data |> 
  ggplot(aes(1:nrow(adv_data), missing)) +
  geom_point() #+
  #xlim(10000, nrow(adv_data)) +
  #ylim(0, 10)
```



### temp

```{r}
adv_data_qc |> 
  ggplot(aes(1:nrow(adv_data_qc), temp)) + geom_line()
```

## Post times

```{r}
post_times <- df |> 
  filter(str_starts(X1, "\\[\\d+\\]\\$")) |> 
  mutate(X1 = str_remove(X1, "\\[\\d+\\]\\$")) |> 
  separate(X1, 
           into = c('hour', 'min', 'sec', 'day', 'month', 'year',
                    'lat', 'lon'),
           sep = ',') |>
  mutate(across(1:6, as.integer),
         across(7:8, as.numeric),
         timestamp = make_datetime(year, month, day, hour, min, sec,
                                   tz = "GMT"))

```

