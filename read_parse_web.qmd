---
title: "Parse LECS Web"
format: html
editor: source
params:
  start_date: 2024-04-23
---

Get and parse data sent to LECS website. Data from `r params$start_date` to present.

```{r}
#| warning: false
#| message: false

library(tidyverse)
library(lubridate)
library(mlabtools)
library(patchwork)

theme_set(theme_bw())
options(digits.secs=3)
```

# Get Data

Get data from website. 

Use `start_date` parameter to limit download.

```{r}
df_raw <- lecs_read_web(start_date = params$start_date)
```

Add row, type, send and line number

```{r}
df <- lecs_add_metadata(df_raw)
```

Separate data into post times, met, status, and adv data

```{r}
post_times <- lecs_post_times(df) 
met <- lecs_met_data(df)
status <- lecs_status_data(df)
adv_data <- lecs_adv_data(df, rinko_cals) |> 
  make_lecs_ts(status) |> 
  mutate(missing = lecs_missing(count, line))
```

Filter bad data

```{r}
status_qc <- status |> 
  filter(soundspeed > 1450, 
         adv_day < 32, adv_month > 0, adv_month < 13, 
         adv_min < 61, adv_hour < 24, adv_year < 100,
         #timestamp > "2023-01-01",
         timestamp < "2024-10-01")

adv_data_qc <- adv_data |> 
  filter(count >= 0, count < 256, 
         #ana_in2 == 1, 
         #timestamp > "2023-01-01",
         timestamp < "2024-10-01")
```

Calculate per-send means

```{r}
met_mean <- met |> 
  group_by(send) |> 
  summarise(across(everything(), 
                   list(mean = ~ mean(.x, na.rm = TRUE), 
                        sd = ~ sd(.x, na.rm = TRUE))))

status_mean <- status_qc |> 
  select(send, timestamp, bat, heading, pitch, roll) |> 
  group_by(send) |> 
  summarise(across(c(timestamp, bat, heading, pitch, roll), 
                   list(mean = ~ mean(.x, na.rm = TRUE), 
                        sd = ~ sd(.x, na.rm = TRUE))))

adv_data_mean <- adv_data_qc |> 
  select(send, missing, timestamp, 
         pressure, temp, 
         u, v, w, 
         amp1, amp2, amp3,
         corr1, corr2, corr3,
         DO_percent, pH) |> 
  group_by(send) |> 
  summarise(across(everything(), 
                   list(mean = ~ mean(.x, na.rm = TRUE), 
                        sd = ~ sd(.x, na.rm = TRUE))),
            missing_frac = sum(missing, na.rm = TRUE) / (sum(missing, na.rm = TRUE) + n()),
            N = n())
```

#### Last post was `r max(post_times$timestamp)`

How many status lines are in the wrong year?

```{r}
ct <- post_times |> 
  select(post_time = timestamp, send)

status |> 
  select(send, lander_time = timestamp) |> 
  inner_join(ct) |> 
  filter(lander_time > "2024-06-01") |> 
  ggplot(aes(post_time, lander_time)) +
  geom_point() + 
  scale_x_datetime(date_labels = "%Y-%m-%d") +
  ggtitle("Incorrect Lander timestamps")
```

### Battery

```{r}
status_mean |> 
  plot_mean(bat_mean, bat_sd) +
  geom_smooth() +
  labs(title = "Battery Voltage",
       y = "Volts")
```

### PAR

```{r}
met_mean |> 
  plot_mean(PAR_mean, PAR_sd)
```

### Wind Speed

```{r}
met_mean |> 
  plot_mean(wind_speed_mean, wind_speed_sd) +
  labs(title = "Wind Speed",
       y = "Wind Speed (m/s)")
```

### Wind direction

```{r}
ggplot(met_mean, aes(wind_dir_mean, wind_speed_mean)) +
  geom_point() +
  coord_polar() +
  scale_x_continuous(limits = c(0,360),
                     breaks = seq(0, 360, by = 45),
                     minor_breaks = seq(0, 360, by = 15))
```

### Pressure/Depth

```{r}
adv_data_mean |> 
  plot_mean(pressure_mean, pressure_sd) +
  scale_y_reverse() +
  labs(title = "Pressure",
       y = "Pressure (dbar)")
```

### pH

```{r}
adv_data_mean |> 
  plot_mean(pH_mean, pH_sd) +
  labs(title = "pH")
```

### Temperature

```{r}
adv_data_mean |> 
  plot_mean(temp_mean, temp_sd) +
  labs(title = "Temperature",
       y = "Temp (C)")
```

### Oxygen

```{r}
adv_data_mean |> 
  plot_mean(DO_percent_mean, DO_percent_sd) +
  labs(title = "Oxygen",
       y = "Oxygen saturation (%)")
```

### ADV Correlation

```{r}
adv_data_mean |> 
  select(timestamp_mean, corr1_mean, corr2_mean, corr3_mean) |> 
  pivot_longer(starts_with("corr")) |>
  ggplot(aes(timestamp_mean, value, color = name)) +
  geom_smooth(aes(timestamp_mean, value), se = FALSE) +
  geom_smooth(aes(timestamp_mean, value, color = NULL)) +
  geom_point() +
  labs(title = "ADV correlation",
       x = NULL,
       y = "Correlation (%)")
```

### ADV Amplitude

```{r}
adv_data_mean |> 
  select(timestamp_mean, amp1_mean, amp2_mean, amp3_mean) |> 
  pivot_longer(starts_with("amp")) |>
  ggplot(aes(timestamp_mean, value, color = name)) +
  geom_smooth(aes(timestamp_mean, value), se = FALSE) +
  geom_smooth(aes(timestamp_mean, value, color = NULL)) +
  geom_point() +
  labs(title = "ADV amplitude",
       x = NULL,
       y = "Amplitude")
```

### ADV Vertical Velocity

```{r}
adv_data_mean |> 
  plot_mean(w_mean, w_sd) +
  ylim(-0.1, 0.1) +
  labs(title = "Vertical velocity",
       y = "cm/s")
```

### ADV Onshore Velocity

Positive is towards shore
ADV set up with x axis towards shore as of 2024-03-07, unsure earlier

```{r}
adv_data_mean |> 
  plot_mean(u_mean, u_sd) +
  ylim(-0.5, 0.5) +
  labs(title = "Onshore velocity",
       y = "cm/s")
```

### ADV Alongshore velocity

Positive is southerly current

```{r}
adv_data_mean |> 
  plot_mean(v_mean, v_sd) +
  ylim(-0.5, 0.5) +
  labs(title = "Alongshore velocity",
       y = "cm/s")
```

## IMU data

```{r}
hp <- status_mean |> 
  plot_mean(heading_mean, heading_sd) +
  geom_smooth() +
  labs(title = "Heading",
       y = "Degrees")

pp <- status_mean |> 
  plot_mean(pitch_mean, pitch_sd) +
  geom_smooth() +
  labs(title = "Pitch",
       y = "Degrees")

rp <- status_mean |> 
  plot_mean(roll_mean, roll_sd) +
  geom_smooth() +
  labs(title = "Roll",
       y = "Degrees")

hp / pp / rp
```

### Missing data

Most missing data is in first 30 lines per send. This is the beginning of a new
file. This is likely a gap as DAQ gets started again after pausing for send.
The following plot is missing fraction without the first 25 lines of each send.

```{r}
adv_missing <- adv_data |> 
  filter(count >= 0, count < 256, 
         line > 30) |> 
  #timestamp < "2024-10-01") |> 
  select(send, missing) |> 
  inner_join(post_times) |> 
  group_by(timestamp) |> 
  summarise(missing_frac = sum(missing, na.rm = TRUE) / (sum(missing, na.rm = TRUE) + n()),
            N = n())

adv_missing |> 
  ggplot(aes(timestamp, missing_frac)) +
  geom_point() +
  labs(title = "Fraction missing by send, without first 30 lines",
       x = NULL,
       y = "Fraction missing")
```

### Post times

```{r}
knitr::kable(post_times)
```

### Lines per post

```{r}
post_times |> 
  ggplot(aes(timestamp, row_count)) +
  geom_point() +
  labs(title = "Lines per post",
       x = NULL,
       y = "Lines")
```
