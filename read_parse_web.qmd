---
title: "Parse LECS Web"
format: html
editor: source
params:
  start_date: 2024-01-01
---

Get and parse data sent to LECS website

# Get Data

```{r}
library(tidyverse)
library(rvest)
library(lubridate)
library(mlabtools)
library(tidyquant)
library(shiny)
library(htmlwidgets)

# time offset in seconds
ts_offset <- 671628945
```

Select data (doesn't work yet)

```{r, eval=FALSE}
date_picker <- fluidPage(
  dateInput("start_date", "Start Date:", value = Sys.Date()),
)

includeHTML(widget = date_picker)
```

Extract table

```{r}
baseURL <- "https://gems.whoi.edu/LECS_data/?timestamp="
queryURL <- paste0(baseURL, format(as.Date(params$start_date), "%Y%m%d%H"))
df_raw <- read_html(queryURL) |> 
  html_node("table") |> 
  html_table()
```

Add row, type and line number

```{r}
df <- df_raw |> 
  mutate(row_num = row_number(),
         type = str_match(X1, "\\[\\d+\\]([DMS$!]):?")[,2],
         send = cumsum(type == "$"),
         line = as.integer(str_match(X1, "\\[(\\d+)\\][DMS$!]:?")[,2]),
         data = str_remove(X1, "\\[\\d+\\][DMS$!]:?")) |> 
  select(row_num, send, type, line, data)
```

Separate data

```{r}
# Met data
met <- df |> 
  filter(type == "M") |> 
  separate(data, 
           into = c('hour', 'min', 'sec', 
                    'day', 'month', 'year', 
                    'PAR', 'wind_speed', 'wind_dir'), 
           sep = ',') |> 
  mutate(across(5:10, as.integer),
         across(11:13, as.numeric),
         wind_speed = ifelse(wind_speed < 99, wind_speed, NA),
         wind_dir = ifelse(wind_dir < 360, wind_dir, NA),
         timestamp = make_datetime(year, month, day, 
                                   hour, min, sec, 
                                   tz = "America/New_York")) |> 
  select(timestamp, send, PAR, wind_speed, wind_dir)

# ADV Status
status <- df |> 
  filter(type == "S") |> 
  separate(data, 
           into = c('hour', 'min', 'sec', 'day', 'month', 'year',
                    'adv_min', 'adv_sec', 'adv_day', 
                    'adv_hour', 'adv_year', 'adv_month',
                    'bat', 'soundspeed', 'heading', 'pitch', 
                    'roll', 'temp', 
                    'pump_current', 'pump_voltage', 'pump_power'),
           sep = ',') |>
  mutate(across(5:16, as.integer),
         across(17:25, ~ as.numeric(.x) * .1),
         timestamp = make_datetime(year, month, day, hour, min, sec,
                                   tz = "America/New_York"),
         adv_timestamp = make_datetime(adv_year + 2000, adv_month, adv_day, adv_hour, adv_min, adv_sec, 
                                       tz = "America/New_York"),
         adv_timestamp_cor = adv_timestamp + ts_offset)

status_qc <- status |> 
  filter(soundspeed > 1450, 
         adv_day < 32, adv_month > 0, adv_month < 13, adv_min < 61, 
         adv_hour < 24, adv_year < 100)

status_mean <- status_qc |> 
  select(send, timestamp, bat) |> 
  group_by(send) |> 
  summarise(across(c(timestamp, bat), list(mean = ~ mean(.x, na.rm = TRUE), sd = ~ sd(.x, na.rm = TRUE))))

# ADV data lines
adv_data <- df |> 
  filter(type == "D") |> 
  separate(data, 
           into = c('count', 'pressure', 
                    'x_vel', 'y_vel', 'z_vel',
                    'x_amp', 'y_amp', 'z_amp',
                    'x_cor', 'y_cor', 'z_cor',
                    'ana_in', 'ana_in2', 'pH', 
                    'temp', 'oxy'),
           sep = ',') |>
  mutate(across(6:20, as.numeric),
         count = as.integer(count))

# quick and dirty time alignment

find_nearest_row <- function(row_number) {
  return(which.min(abs(status$row_num - row_number)))
}

adv_data$timestamp <- status$timestamp[sapply(adv_data$row_num, find_nearest_row)]

adv_data_qc <- adv_data |> 
  filter(count >= 0, count < 256, 
         ana_in2 == 1) 
```

## Met

### PAR

```{r}
ggplot(met, aes(timestamp, PAR)) + geom_point()
```

```{r}
met |> 
  group_by(send) |> 
  summarize(across(everything(), mean)) |> 
ggplot(aes(timestamp, PAR)) + geom_point()
```

### Wind Speed

```{r}
ggplot(met, aes(timestamp, wind_speed)) + geom_point()
```

### Wind direction

```{r}
ggplot(met, aes(timestamp, wind_dir)) + geom_point()
```

## Status

### Battery

```{r}
status_qc |> 
  filter(year >= 2023, 
         year < 2025) |> 
ggplot(aes(timestamp, bat)) +
  geom_point()
```

```{r}
status_mean |> 
ggplot(aes(timestamp_mean, bat_mean, ymin = bat_mean - bat_sd, ymax = bat_mean + bat_sd)) +
  geom_pointrange()
```

## ADV Data

### pressure

```{r}
adv_data_qc |> 
  ggplot(aes(timestamp, pressure)) + geom_point()
```

### pH

```{r}
adv_data_qc |> 
  ggplot(aes(timestamp, pH)) +
  geom_point()
```

### temp

```{r}
adv_data_qc |> 
  ggplot(aes(timestamp, temp)) + 
  geom_point()
```

### Missing data

#### Plot missingness

TODO: running fraction missing plot

```{r}
adv_data <- adv_data |> 
  mutate(missing = case_when(line == 1 | count > 255 | lag(count) > 255 ~ NA_integer_,
                             count > lag(count) ~ count - 1L - lag(count),
                             TRUE ~ 255L + count - lag(count)
                           ))
```


```{r}
adv_data |> 
  ggplot(aes(row_num, missing)) +
  geom_point() #+
  #xlim(10000, nrow(adv_data)) +
  #ylim(0, 10)
```

```{r}
adv_data |> 
  #drop_na(missing) |> 
  ggplot(aes(row_num, missing)) +
  tidyquant::geom_ma(n = 10, linetype = 1) 
```

## Post times

Add # lines per post

```{r}
post_times <- df |> 
  filter(type == "$") |> 
  separate(data, 
           into = c('hour', 'min', 'sec', 'day', 'month', 'year',
                    'lat', 'lon'),
           sep = ',') |>
  mutate(across(5:10, as.integer),
         across(11:12, as.numeric),
         timestamp = make_datetime(year, month, day, hour, min, sec,
                                   tz = "America/New_York"),
         row_count = row_num - lag(row_num))
```


```{r}
post_times |> 
  select(timestamp, row_num, row_count) |> 
tail(10)
```

```{r}
post_times |> 
  ggplot(aes(timestamp, row_count)) +
  geom_point()
```

```{r}
post_times |> 
  filter(timestamp > '2020-01-01') |> 
  ggplot(aes(timestamp, row_count)) +
  geom_point()
```
