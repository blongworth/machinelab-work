---
title: Calibrate pH sensor
format: html
editor: source
---

TODO: abstract calibration
TODO: handle May sensor change
TODO: Calibrate O2 from seaphox

Apply ph calibration to entire dataset

save parquet

```{r}
library(arrow)
library(tidyverse)
library(janitor)
library(readxl)
library(mlabtools)
library(dygraphs)
#library(clock)
#library(data.table)

data_dir <- "data/processed/surface"
```

Open dataset

```{r}
ds <- open_dataset(file.path(data_dir, "lecs_adv_filt.parquet"))
```


# Calibration

Calibrate full data set

add col for calibration periods

```{r}
ds <- ds |> 
  mutate(ph_group = case_when(timestamp > "2023-12-22 06:45:00" ~ 1L,
                              timestamp > "2024-06-05 11:45:00" ~ 2L,
                              TRUE ~ 0L))
```

## Seaphox calibration data

### Jul calibration

```{r}
sp_jul <- read_excel("data/SeapHOx Data/Seaphox_LECS_072423.xlsx") |> 
  clean_names() |> 
  select(timestamp = date_time_utc_04_00,
         pH = internal_p_h_p_h,
         temp = p_h_temperature_celsius,
         pressure = pressure_decibar,
         sal = salinity_psu,
         oxygen = oxygen_ml_l) |> 
  mutate(timestamp = timestamp - 4 * 60 * 60)

sp_jul <- filter(sp_jul, timestamp > "2023-07-24 17:00:00",
                 timestamp < "2023-08-09 8:00:00")
```

check alignment with LECS data

```{r}
lecs_jul <- ds |> 
  select(timestamp, pH) |> 
  filter(timestamp > "2023-07-24 17:00:00",
                 timestamp < "2023-08-09 8:00:00") |> 
  mutate(timestamp = floor_date(timestamp, unit = "minutes")) |> 
  group_by(timestamp) |> 
  summarize(LECS_pH = mean(pH)) |> 
  collect()

ggplot(sp_jul, aes(timestamp, pH)) +
  geom_line() +
  geom_line(data = lecs_jul, aes(timestamp, LECS_pH), color = "blue") 

lecs_jul_26 <- lecs_jul |> 
  filter(timestamp < "2023-07-27")

sp_jul_26 <- sp_jul |> 
  filter(timestamp < "2023-07-27")

ggplot(sp_jul_26, aes(timestamp, pH)) +
  geom_line() +
  geom_line(data = lecs_jul_26, aes(timestamp, LECS_pH), color = "blue") 
```

### Oct calibration

```{r}
sp_oct <- read_excel("data/SeapHOx Data/Seaphox_LECS_10052023.xlsx") |> 
  clean_names() |> 
  #mutate(time = mdy_hms(date_time_utc_04_00,
  #                         tz = "UTC")) |> 
  select(timestamp = date_time_utc_04_00,
         pH = internal_p_h_p_h,
         temp = p_h_temperature_celsius,
         pressure = pressure_decibar,
         sal = salinity_psu,
         oxygen = oxygen_ml_l) |> 
  mutate(timestamp = timestamp - 4 * 60 * 60)

sp_oct <- filter(sp_oct, timestamp > "2023-10-19 18:00:00",
                 timestamp < "2023-11-02 04:00:00")
```

check alignment with LECS data

```{r}
lecs_oct <- ds |> 
  select(timestamp, pH) |> 
  filter(timestamp > "2023-10-19 18:00:00",
                 timestamp < "2023-11-02 04:00:00") |> 
  mutate(timestamp = floor_date(timestamp, unit = "minutes")) |> 
  group_by(timestamp) |> 
  summarize(LECS_pH = mean(pH)) |> 
  collect()

ggplot(sp_oct, aes(timestamp, pH)) +
  geom_line() +
  geom_line(data = lecs_oct, aes(timestamp, LECS_pH), color = "blue") 

lecs_oct_21 <- lecs_oct |> 
  filter(timestamp < "2023-10-22")

sp_oct_21 <- sp_oct |> 
  filter(timestamp < "2023-10-22")

ggplot(sp_oct_21, aes(timestamp, pH)) +
  geom_line() +
  geom_line(data = lecs_oct_21, aes(timestamp, LECS_pH), color = "blue") 
```

## Nov calibration

```{r}
sp_nov <- read_excel("data/SeapHOx Data/Seaphox_LECS_111523.xlsx") |> 
  clean_names() |> 
  #mutate(time = mdy_hms(date_time_utc_04_00,
  #                         tz = "UTC")) |> 
  select(timestamp = date_time_utc_04_00,
         pH = internal_p_h_p_h,
         temp = p_h_temperature_celsius,
         pressure = pressure_decibar,
         sal = salinity_psu,
         oxygen = oxygen_ml_l) |> 
  mutate(timestamp = timestamp - 5 * 60 * 60)

sp_nov <- filter(sp_nov, timestamp > "2023-11-15 16:00:00",
                 timestamp < "2023-11-21 04:00:00")
```

check alignment with LECS data

```{r}
lecs_nov <- ds |> 
  select(timestamp, pH) |> 
  filter(timestamp > "2023-11-15 16:00:00",
                 timestamp < "2023-11-21 04:00:00") |> 
  mutate(timestamp = floor_date(timestamp, unit = "minutes")) |> 
  group_by(timestamp) |> 
  summarize(LECS_pH = mean(pH)) |> 
  collect()

ggplot(sp_nov, aes(timestamp, pH)) +
  geom_line() +
  geom_line(data = lecs_nov, aes(timestamp, LECS_pH), color = "blue") 

lecs_nov_s <- lecs_nov |> 
  filter(timestamp < "2023-11-18")

sp_nov_s <- sp_nov |> 
  filter(timestamp < "2023-11-18")

ggplot(sp_nov_s, aes(timestamp, pH)) +
  geom_line() +
  geom_line(data = lecs_nov_s, aes(timestamp, LECS_pH), color = "blue") 
```

## December calibration

before sensor change

```{r}
sp_dec <- read_excel("data/SeapHOx Data/Seaphox_LECS_120723.xlsx") |> 
  clean_names() |> 
  #mutate(time = mdy_hms(date_time_utc_04_00,
  #                         tz = "UTC")) |> 
  select(timestamp = date_time_utc_04_00,
         pH = internal_p_h_p_h,
         temp = p_h_temperature_celsius,
         pressure = pressure_decibar,
         sal = salinity_psu,
         oxygen = oxygen_ml_l) |> 
  mutate(timestamp = timestamp - 5 * 60 * 60)

sp_dec <- filter(sp_dec, timestamp > "2023-12-08 06:00:00",
                 timestamp < "2023-12-14 09:00:00")
```

check alignment with LECS data

```{r}
lecs_dec <- ds |> 
  select(timestamp, pH) |> 
  filter(timestamp > "2023-12-08 06:00:00",
                 timestamp < "2023-12-14 14:00:00") |> 
  mutate(timestamp = floor_date(timestamp, unit = "minutes")) |> 
  group_by(timestamp) |> 
  summarize(LECS_pH = mean(pH)) |> 
  collect()

ggplot(sp_dec, aes(timestamp, pH)) +
  geom_line() +
  geom_line(data = lecs_dec, aes(timestamp, LECS_pH), color = "blue") 

lecs_dec_s <- lecs_dec |> 
  filter(timestamp < "2023-12-12")

sp_dec_s <- sp_dec |> 
  filter(timestamp < "2023-12-12")

ggplot(sp_dec_s, aes(timestamp, pH)) +
  geom_line() +
  geom_line(data = lecs_dec_s, aes(timestamp, LECS_pH), color = "blue") 
```

## Jan calibration

Note that seapHOx data have UTC timestamps

```{r}
sp_jan <- read_seaphox("data/SeapHOx Data/Seaphox_LECS_122223.csv") |> 
  mutate(timestamp = timestamp - 5 * 60 * 60)

sp_jan <- filter(sp_jan, timestamp > "2023-12-22 14:00:00",
                 timestamp < "2024-01-03 05:00:00")
```

check alignment with LECS data

```{r}
lecs_jan <- ds |> 
  select(timestamp, pH) |> 
  filter(timestamp > "2023-12-22 14:00:00",
                 timestamp < "2024-01-03 06:00:00") |> 
  mutate(timestamp = floor_date(timestamp, unit = "minutes")) |> 
  group_by(timestamp) |> 
  summarize(LECS_pH = mean(pH)) |> 
  collect()

ggplot(sp_jan, aes(timestamp, pH)) +
  geom_line() +
  geom_line(data = lecs_jan, aes(timestamp, LECS_pH), color = "blue") 

lecs_jan_s <- lecs_jan |> 
  filter(timestamp < "2023-12-25")

sp_jan_s <- sp_jan |> 
  filter(timestamp < "2023-12-25")

ggplot(sp_jan_s, aes(timestamp, pH)) +
  geom_line() +
  geom_line(data = lecs_jan_s, aes(timestamp, LECS_pH), color = "blue") 
```

## Apr 2024 calibration

Seaphox fell over and moved in storm. 
Looks like pH shifted during deployment.
Seacat died at end of deployment

Note that seapHOx data have UTC timestamps

```{r}
sp_apr <- read_seaphox("data/SeapHOx Data/Seaphox_LECS_20240401.csv") |> 
  mutate(timestamp = timestamp - 5 * 60 * 60)

sp_apr %>% 
  select(timestamp, sal, temp, pressure, pH) %>% 
  dygraph()
```


```{r}
sp_apr <- filter(sp_apr, timestamp > "2024-03-22 14:00:00",
                 timestamp < "2024-04-01 05:52:00")
```

check alignment with LECS data

```{r}
lecs_apr <- ds |> 
  select(timestamp, pH) |> 
  filter(timestamp > "2024-03-22 14:00:00",
                 timestamp < "2024-04-01 05:52:00") |> 
  mutate(timestamp = floor_date(timestamp, unit = "minutes")) |> 
  group_by(timestamp) |> 
  summarize(LECS_pH = mean(pH)) |> 
  collect()

ggplot(sp_apr, aes(timestamp, pH)) +
  geom_line() +
  geom_line(data = lecs_apr, aes(timestamp, LECS_pH), color = "blue") 
```

## May 2024 calibration

Seacat also may have run out of batteries.

Note that seapHOx data have UTC timestamps

```{r}
sp_may <- read_seaphox("data/SeapHOx Data/Seaphox_LECS_20240514.csv") |> 
  mutate(timestamp = timestamp - 5 * 60 * 60)

sp_may %>% 
  select(timestamp, sal, temp, pressure, pH) %>% 
  dygraph()
```


```{r}
sp_may <- filter(sp_may, timestamp > "2024-04-25 14:00:00",
                 timestamp < "2024-05-01 10:54:00")
```

check alignment with LECS data

```{r}
lecs_may <- ds |> 
  select(timestamp, pH) |> 
  filter(timestamp > "2024-04-25 14:00:00",
                 timestamp < "2024-05-01 11:00:00") |> 
  mutate(timestamp = floor_date(timestamp, unit = "minutes")) |> 
  group_by(timestamp) |> 
  summarize(LECS_pH = mean(pH)) |> 
  collect()

ggplot(sp_may, aes(timestamp, pH)) +
  geom_line() +
  geom_line(data = lecs_may, aes(timestamp, LECS_pH), color = "blue") 
```

## June 2024 calibration

No salinity or pressure data- dead seacat.

Note that seapHOx data have UTC timestamps

```{r}
sp_jun <- read_seaphox("data/SeapHOx Data/Seaphox_LECS_20240621.csv") |> 
  mutate(timestamp = timestamp - 5 * 60 * 60)

sp_jun %>% 
  select(timestamp, sal, temp, pressure, pH) %>% 
  dygraph()
```

```{r}
sp_jun %>% 
  select(timestamp, temp, pH) %>% 
  dygraph()
```

```{r}
sp_jun <- filter(sp_jun, timestamp > "2024-06-03 11:30:00",
                 timestamp < "2024-06-14 18:15:00")
```

check alignment with LECS data

```{r}
lecs_jun <- ds |> 
  select(timestamp, pH) |> 
  filter(timestamp > "2024-06-03 11:30:00",
                 timestamp < "2024-06-14 18:15:00") |> 
  mutate(timestamp = floor_date(timestamp, unit = "minutes")) |> 
  group_by(timestamp) |> 
  summarize(LECS_pH = mean(pH)) |> 
  collect()

ggplot(sp_jun, aes(timestamp, pH)) +
  geom_line() +
  geom_line(data = lecs_jun, aes(timestamp, LECS_pH), color = "blue") 
```

## Aug 2024 calibration

seaphet and microcat batteries replaced
sal issue- sensor not working in first part of deployment

Note that seapHOx data have UTC timestamps

```{r}
sp_aug <- read_seaphox("data/SeapHOx Data/Seaphox_LECS_20240815.csv") |> 
  mutate(timestamp = timestamp - 5 * 60 * 60)

sp_aug %>% 
  select(timestamp, sal, temp, pressure, pH) %>% 
  dygraph()
```

```{r}
sp_aug <- filter(sp_aug, timestamp > "2024-08-10 14:30:00",
                 timestamp < "2024-08-15 04:24:00")
```

check alignment with LECS data

```{r}
lecs_aug <- ds |> 
  select(timestamp, pH) |> 
  filter(timestamp > "2024-08-10 14:30:00",
                 timestamp < "2024-08-15 04:24:00") |> 
  mutate(timestamp = floor_date(timestamp, unit = "minutes")) |> 
  group_by(timestamp) |> 
  summarize(LECS_pH = mean(pH)) |> 
  collect()

ggplot(sp_aug, aes(timestamp, pH)) +
  geom_line() +
  geom_line(data = lecs_aug, aes(timestamp, LECS_pH), color = "blue") 
```

## Sept 2024 calibration

2024-09-03 deployment had no salinity, 
then was picked up and dragged to deeper water (boat?).
Last half of data may be usable, but deeper/further from lander.

This is mid sept deployment

```{r}
sp_sep <- read_seaphox("data/SeapHOx Data/Seaphox_LECS_20240917.csv") |> 
  mutate(timestamp = timestamp - 5 * 60 * 60)

sp_sep %>% 
  select(timestamp, sal, temp, pressure, pH) %>% 
  dygraph()
```

```{r}
sp_sep <- filter(sp_sep, timestamp > "2024-09-06 17:00:00",
                 timestamp < "2024-09-17 04:30:00")
```

check alignment with LECS data

```{r}
lecs_sep <- ds |> 
  select(timestamp, pH) |> 
  filter(timestamp > "2024-09-06 17:00:00",
                 timestamp < "2024-09-17 04:30:00") |> 
  mutate(timestamp = floor_date(timestamp, unit = "minutes")) |> 
  group_by(timestamp) |> 
  summarize(LECS_pH = mean(pH)) |> 
  collect()

ggplot(sp_sep, aes(timestamp, pH)) +
  geom_line() +
  geom_line(data = lecs_sep, aes(timestamp, LECS_pH), color = "blue") 
```

# Calibration

do regression of temp and ph_counts on seaphox ph and add to df

To speed up, modify `generate_ph_model`, work with Arrow data, and parallelize

```{r}
jul_coef <- generate_ph_model(sp_jul, ds)
oct_coef <- generate_ph_model(sp_oct, ds)
nov_coef <- generate_ph_model(sp_nov, ds)
dec_coef <- generate_ph_model(sp_dec, ds)
jan_coef <- generate_ph_model(sp_jan, ds)
#apr_coef <- generate_ph_model(sp_apr, ds) # seaphox tipped and moved in storm
may_coef <- generate_ph_model(sp_may, ds)
#jun_coef <- generate_ph_model(sp_jun, ds) # dead seacat
aug_coef <- generate_ph_model(sp_aug, ds)
#sep_coef <- generate_ph_model(sp_sep, ds) # no lecs data yet

```

## Smooth between regressions

Smoothly transition between fit parameters to account for drift

make df with timestamp and cal factors
don't use jan cal (do stepwise due to sensor change)

```{r}
cals <- list(sp_jul, sp_oct, sp_nov, sp_dec)
coefs <- bind_rows(jul_coef, oct_coef, nov_coef, dec_coef)
cal_time <- map(cals, ~mean(.x$timestamp))
cal_time <- do.call(c, cal_time)
cal_df <- bind_cols(as.data.frame(cal_time), coefs)
```

Apply linear fit between calibrations

calibrate groups between sensor changes separately

convert to dataframe

```{r}
df <- collect(ds)
```


```{r}
i_ap_fun <- approxfun(cal_df$cal_time, cal_df$`(Intercept)`, rule = 2)
c_ap_fun <- approxfun(cal_df$cal_time, cal_df$lecs_ph_counts, rule = 2)
t_ap_fun <- approxfun(cal_df$cal_time, cal_df$lecs_temp, rule = 2)
i_fit <- i_ap_fun(df$timestamp)
c_fit <- c_ap_fun(df$timestamp)
t_fit <- t_ap_fun(df$timestamp)
```

```{r}
df_cal <- df %>% 
  mutate(
    ph_i = i_fit,
    ph_c = c_fit,
    ph_t = t_fit,
    #ph_i = if_else(ph_group == 1, jan_coef[1], ph_i),
    #ph_c = if_else(ph_group == 1, jan_coef[2], ph_c),
    #ph_t = if_else(ph_group == 1, jan_coef[3], ph_t),
    ph_i = replace(ph_i, ph_group == 1, jan_coef[1]),
    ph_c = replace(ph_c, ph_group == 1, jan_coef[2]),
    ph_t = replace(ph_t, ph_group == 1, jan_coef[3]),
    pH = ph_i + ph_c * ph_counts + ph_t * temp)
```


```{r}
ds_cal <- df_cal |> 
  select(-c(ph_group, ph_i, ph_c, ph_t)) |> 
  arrow_table() 
ds_cal %>% 
  group_by(year = year(timestamp), month = month(timestamp)) %>% 
  write_dataset(file.path(data_dir, "lecs_adv_cal.parquet"))
```

Calculate per-hour mean


with duckdb. also doesn't work with timezone!

```{r}
adv_data_mean <- ds |>
  to_duckdb() |> 
  group_by(year = year(timestamp), month = month(timestamp), day = day(timestamp), hour = hour(timestamp)) |> 
  summarise(across(-timestamp, 
                   ~ mean(.x, na.rm = TRUE))) |> 
  mutate(timestamp = make_datetime(year, month, day, hour)) |> 
  ungroup()
adv_data_mean

  
```

```{r}
dygraph(select(adv_data_mean, timestamp, pH))
```

```{r}
dygraph(select(adv_data_mean, time, ph_counts))
```

```{r}
dygraph(select(adv_data_mean, time, pH))
```

```{r}
sp <- bind_rows(sp_jul, sp_oct, sp_nov, sp_dec, sp_jan)

select(sp, time, pH) |> dygraph()
```

