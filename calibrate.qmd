---
title: Calibrate pH sensor
format: html
editor: source
---

TODO: abstract calibration

* Apply ph and oxygen calibration to entire dataset
* save parquet

linear coefficients for each calibration

linear interpolation between calibrations

pH calibration is done stepwise for each sensor change

oxygen calibration is continuous for entire deployment

```{r}
library(arrow)
library(tidyverse)
library(janitor)
library(readxl)
library(mlabtools)
library(dygraphs)

data_dir <- "data/processed/surface"
```

Open dataset

```{r}
ds <- open_dataset(file.path(data_dir, "lecs_adv_filt.parquet"))
```

# Calibration

Calibrate full data set

add col for calibration periods

```{r}
ds <- ds |> 
  mutate(ph_group = 0L,
         ph_group = ifelse(timestamp > "2023-12-22 06:45:00", 1, ph_group),
         ph_group = ifelse(timestamp > "2024-06-05 11:45:00", 2, ph_group))
```

# Seaphox calibration data

## Jul calibration

```{r}
sp_jul <- read_excel("data/SeapHOx Data/Seaphox_LECS_072423.xlsx") |> 
  clean_names() |> 
  select(timestamp = date_time_utc_04_00,
         pH = internal_p_h_p_h,
         temp = p_h_temperature_celsius,
         pressure = pressure_decibar,
         sal = salinity_psu,
         oxygen = oxygen_ml_l) |> 
  mutate(timestamp = timestamp - 4 * 60 * 60,
         oxygen = o2_ml_l_to_umol_l(oxygen, temp)) |>
  filter(timestamp > "2023-07-24 17:00:00",
                 timestamp < "2023-08-09 8:00:00")
```

## Oct calibration

```{r}
sp_oct <- read_excel("data/SeapHOx Data/Seaphox_LECS_10052023.xlsx") |> 
  clean_names() |> 
  select(timestamp = date_time_utc_04_00,
         pH = internal_p_h_p_h,
         temp = p_h_temperature_celsius,
         pressure = pressure_decibar,
         sal = salinity_psu,
         oxygen = oxygen_ml_l) |> 
  mutate(timestamp = timestamp - 4 * 60 * 60,
         oxygen = o2_ml_l_to_umol_kg(oxygen, sal, temp, pressure))

sp_oct <- filter(sp_oct, timestamp > "2023-10-19 18:00:00",
                 timestamp < "2023-11-02 04:00:00")
```
## Nov calibration

```{r}
sp_nov <- read_excel("data/SeapHOx Data/Seaphox_LECS_111523.xlsx") |> 
  clean_names() |> 
  #mutate(time = mdy_hms(date_time_utc_04_00,
  #                         tz = "UTC")) |> 
  select(timestamp = date_time_utc_04_00,
         pH = internal_p_h_p_h,
         temp = p_h_temperature_celsius,
         pressure = pressure_decibar,
         sal = salinity_psu,
         oxygen = oxygen_ml_l) |> 
  mutate(timestamp = timestamp - 5 * 60 * 60,
         oxygen = o2_ml_l_to_umol_kg(oxygen, sal, temp, pressure))

sp_nov <- filter(sp_nov, timestamp > "2023-11-15 16:00:00",
                 timestamp < "2023-11-21 04:00:00")
```

## December calibration

before sensor change

```{r}
sp_dec <- read_excel("data/SeapHOx Data/Seaphox_LECS_120723.xlsx") |> 
  clean_names() |> 
  select(timestamp = date_time_utc_04_00,
         pH = internal_p_h_p_h,
         temp = p_h_temperature_celsius,
         pressure = pressure_decibar,
         sal = salinity_psu,
         oxygen = oxygen_ml_l) |> 
  mutate(timestamp = timestamp - 5 * 60 * 60,
         oxygen = o2_ml_l_to_umol_kg(oxygen, sal, temp, pressure))

sp_dec <- filter(sp_dec, timestamp > "2023-12-08 06:00:00",
                 timestamp < "2023-12-14 09:00:00")
```

## Jan calibration

Note that seapHOx data have UTC timestamps

```{r}
sp_jan <- read_seaphox("data/SeapHOx Data/Seaphox_LECS_122223.csv") |> 
  mutate(timestamp = timestamp - 5 * 60 * 60,
         oxygen = o2_ml_l_to_umol_kg(oxygen, sal, temp, pressure))

sp_jan <- filter(sp_jan, timestamp > "2023-12-22 14:00:00",
                 timestamp < "2024-01-03 05:00:00")
```

## Apr 2024 calibration

Seaphox fell over and moved in storm. 
Looks like pH shifted during deployment.
Seacat died at end of deployment

Note that seapHOx data have UTC timestamps

```{r}
sp_apr <- read_seaphox("data/SeapHOx Data/Seaphox_LECS_20240401.csv") |> 
  mutate(timestamp = timestamp - 5 * 60 * 60,
         oxygen = o2_ml_l_to_umol_kg(oxygen, sal, temp, pressure))
sp_apr <- filter(sp_apr, timestamp > "2024-03-22 14:00:00",
                 timestamp < "2024-04-01 05:52:00")
```

## May 2024 calibration

Seacat also may have run out of batteries.

Note that seapHOx data have UTC timestamps

```{r}
sp_may <- read_seaphox("data/SeapHOx Data/Seaphox_LECS_20240514.csv") |> 
  mutate(timestamp = timestamp - 5 * 60 * 60,
         oxygen = o2_ml_l_to_umol_kg(oxygen, sal, temp, pressure))
sp_may <- filter(sp_may, timestamp > "2024-04-25 14:00:00",
                 timestamp < "2024-05-01 10:54:00")
```

## June 2024 calibration

No salinity or pressure data- dead seacat.

Note that seapHOx data have UTC timestamps

```{r}
sp_jun <- read_seaphox("data/SeapHOx Data/Seaphox_LECS_20240621.csv") |> 
  mutate(timestamp = timestamp - 5 * 60 * 60,
         oxygen = o2_ml_l_to_umol_kg(oxygen, sal, temp, pressure))
sp_jun <- filter(sp_jun, timestamp > "2024-06-03 11:30:00",
                 timestamp < "2024-06-14 18:15:00")
```

This one needs special work - no temp or sal correction, but we need the pH!
Maybe calibrate seaphox to lecs before Jun 5 sensor change and then use the
rest to calibrate lecs post sensor change?

## Aug 2024 calibration

seaphet and microcat batteries replaced
sal issue- sensor not working in first part of deployment

Note that seapHOx data have UTC timestamps

```{r}
sp_aug <- read_seaphox("data/SeapHOx Data/Seaphox_LECS_20240815.csv") |> 
  mutate(timestamp = timestamp - 5 * 60 * 60,
         oxygen = o2_ml_l_to_umol_kg(oxygen, sal, temp, pressure))
sp_aug <- filter(sp_aug, timestamp > "2024-08-10 14:30:00",
                 timestamp < "2024-08-15 04:24:00")
```

## Sept 2024 calibration

2024-09-03 deployment had no salinity, 
then was picked up and dragged to deeper water (boat?).
Last half of data may be usable, but deeper/further from lander.

This is mid sept deployment

```{r}
sp_sep <- read_seaphox("data/SeapHOx Data/Seaphox_LECS_20240917.csv") |> 
  mutate(timestamp = timestamp - 5 * 60 * 60,
         oxygen = o2_ml_l_to_umol_kg(oxygen, sal, temp, pressure))
sp_sep <- filter(sp_sep, timestamp > "2024-09-06 17:00:00",
                 timestamp < "2024-09-17 04:30:00")
```

# pH Calibration

do regression of temp and ph_counts on seaphox ph and add to df

To speed up, modify `generate_ph_model`, work with Arrow data, and parallelize

```{r}
jul_coef <- generate_ph_model(sp_jul, ds)
oct_coef <- generate_ph_model(sp_oct, ds)
nov_coef <- generate_ph_model(sp_nov, ds)
dec_coef <- generate_ph_model(sp_dec, ds)
jan_coef <- generate_ph_model(sp_jan, ds)
#apr_coef <- generate_ph_model(sp_apr, ds) # seaphox tipped and moved in storm
may_coef <- generate_ph_model(sp_may, ds)
#jun_coef <- generate_ph_model(sp_jun, ds) # dead seacat
aug_coef <- generate_ph_model(sp_aug, ds)
sep_coef <- generate_ph_model(sp_sep, ds) 
```

## Smooth between regressions

Smoothly transition between fit parameters to account for drift

convert to dataframe
TODO: only what we need

```{r}
df <- collect(ds)
```

### Jul-Jan fit

make df with timestamp and cal factors
don't use jan cal (do stepwise due to sensor change)

```{r}
cals <- list(sp_jul, sp_oct, sp_nov, sp_dec)
coefs <- bind_rows(jul_coef, oct_coef, nov_coef, dec_coef)
cal_time <- map(cals, ~mean(.x$timestamp))
cal_time <- do.call(c, cal_time)
cal_df <- bind_cols(as.data.frame(cal_time), coefs)
```

```{r}
i_ap_fun <- approxfun(cal_df$cal_time, cal_df$`(Intercept)`, rule = 2)
c_ap_fun <- approxfun(cal_df$cal_time, cal_df$lecs_ph_counts, rule = 2)
t_ap_fun <- approxfun(cal_df$cal_time, cal_df$lecs_temp, rule = 2)
i_fit_0 <- i_ap_fun(df$timestamp)
c_fit_0 <- c_ap_fun(df$timestamp)
t_fit_0 <- t_ap_fun(df$timestamp)
```

### Jan-Jun fit

make df with timestamp and cal factors

```{r}
cals <- list(sp_jan, sp_may)
coefs <- bind_rows(jan_coef, may_coef)
cal_time <- map(cals, ~mean(.x$timestamp))
cal_time <- do.call(c, cal_time)
cal_df <- bind_cols(as.data.frame(cal_time), coefs)
```

```{r}
i_ap_fun <- approxfun(cal_df$cal_time, cal_df$`(Intercept)`, rule = 2)
c_ap_fun <- approxfun(cal_df$cal_time, cal_df$lecs_ph_counts, rule = 2)
t_ap_fun <- approxfun(cal_df$cal_time, cal_df$lecs_temp, rule = 2)
i_fit_1 <- i_ap_fun(df$timestamp)
c_fit_1 <- c_ap_fun(df$timestamp)
t_fit_1 <- t_ap_fun(df$timestamp)
```

### Jun-Sep fit

make df with timestamp and cal factors

```{r}
cals <- list(sp_aug, sp_sep)
coefs <- bind_rows(aug_coef, sep_coef)
cal_time <- map(cals, ~mean(.x$timestamp))
cal_time <- do.call(c, cal_time)
cal_df <- bind_cols(as.data.frame(cal_time), coefs)
```

Can't do this until we're using 2 calibration intervals

```{r}
i_ap_fun <- approxfun(cal_df$cal_time, cal_df$`(Intercept)`, rule = 2)
c_ap_fun <- approxfun(cal_df$cal_time, cal_df$lecs_ph_counts, rule = 2)
t_ap_fun <- approxfun(cal_df$cal_time, cal_df$lecs_temp, rule = 2)
i_fit_2 <- i_ap_fun(df$timestamp)
c_fit_2 <- c_ap_fun(df$timestamp)
t_fit_2 <- t_ap_fun(df$timestamp)
```

Apply linear fit between calibrations

calibrate groups between sensor changes separately

```{r}
df <- df %>% 
  mutate(
    ph_i = i_fit_0,
    ph_c = c_fit_0,
    ph_t = t_fit_0,
    ph_i = ifelse(ph_group == 1, i_fit_1, ph_i),
    ph_c = ifelse(ph_group == 1, c_fit_1, ph_c),
    ph_t = ifelse(ph_group == 1, t_fit_1, ph_t),
    ph_i = ifelse(ph_group == 2, i_fit_2, ph_i),
    ph_c = ifelse(ph_group == 2, c_fit_2, ph_c),
    ph_t = ifelse(ph_group == 2, t_fit_2, ph_t))
```

# Oxygen calibration

do regression of oxygen on seaphox oxygen and add to df

temp cor already done in rinko cal

```{r}
jul_coef <- generate_o2_model(sp_jul, ds)
oct_coef <- generate_o2_model(sp_oct, ds)
nov_coef <- generate_o2_model(sp_nov, ds)
dec_coef <- generate_o2_model(sp_dec, ds)
jan_coef <- generate_o2_model(sp_jan, ds)
may_coef <- generate_o2_model(sp_may, ds)
#aug_coef <- generate_o2_model(sp_aug, ds) # ox no good
sep_coef <- generate_o2_model(sp_sep, ds) 
```


Smoothly transition between fit parameters to account for drift

Oxygen calibrated without stepwise changes for sensor changes

### Jul-Jan fit

make df with timestamp and cal factors

```{r}
cals <- list(sp_jul, sp_oct, sp_nov, sp_dec, sp_jan, sp_may, sp_sep)
coefs <- bind_rows(jul_coef, oct_coef, nov_coef, dec_coef, jan_coef, may_coef, sep_coef)
cal_time <- map(cals, ~mean(.x$timestamp))
cal_time <- do.call(c, cal_time)
cal_df <- bind_cols(as.data.frame(cal_time), coefs)
```

```{r}
i_ap_fun <- approxfun(cal_df$cal_time, cal_df$`(Intercept)`, rule = 2)
o_ap_fun <- approxfun(cal_df$cal_time, cal_df$lecs_oxy, rule = 2)
i_fit_0 <- i_ap_fun(df$timestamp)
o_fit_0 <- o_ap_fun(df$timestamp)
```

### Jan-Jun fit

make df with timestamp and cal factors

```{r, eval=FALSE}
cals <- list(sp_jan, sp_may)
coefs <- bind_rows(jan_coef, may_coef)
cal_time <- map(cals, ~mean(.x$timestamp))
cal_time <- do.call(c, cal_time)
cal_df <- bind_cols(as.data.frame(cal_time), coefs)
```

```{r, eval = FALSE}
i_ap_fun <- approxfun(cal_df$cal_time, cal_df$`(Intercept)`, rule = 2)
o_ap_fun <- approxfun(cal_df$cal_time, cal_df$lecs_oxy, rule = 2)
i_fit_1 <- i_ap_fun(df$timestamp)
o_fit_1 <- t_ap_fun(df$timestamp)
```

### Jun-Sep fit

make df with timestamp and cal factors

```{r, eval = FALSE}
cals <- list(sp_aug, sp_sep)
coefs <- bind_rows(aug_coef, sep_coef)
cal_time <- map(cals, ~mean(.x$timestamp))
cal_time <- do.call(c, cal_time)
cal_df <- bind_cols(as.data.frame(cal_time), coefs)
```

```{r, eval = FALSE}
i_ap_fun <- approxfun(cal_df$cal_time, cal_df$`(Intercept)`, rule = 2)
o_ap_fun <- approxfun(cal_df$cal_time, cal_df$lecs_oxy, rule = 2)
i_fit_2 <- i_ap_fun(df$timestamp)
o_fit_2 <- t_ap_fun(df$timestamp)
```

Apply linear fit between calibrations

```{r}
df <- df %>% 
  mutate(
    ox_i = i_fit_0,
    ox_o = o_fit_0,
    # ox_i = ifelse(ph_group == 1, i_fit_1, ox_i),
    # ox_o = ifelse(ph_group == 1, o_fit_1, ox_o),
    # ox_i = ifelse(ph_group == 2, i_fit_2, ox_i),
    # ox_o = ifelse(ph_group == 2, o_fit_2, ox_o),
  )
```

# Write to parquet

```{r}
ds_cal <- df |> 
  arrow_table() |>
  mutate(pH_cal = ph_i + ph_c * ph_counts + ph_t * temp) |>
  mutate(ox_umol_l_cal = ox_i + ox_o * ox_umol_l) |>
  select(-c(ph_group, ph_i, ph_c, ph_t, ox_i, ox_o))
```

```{r}
ds_cal |>
  group_by(year = year(timestamp), month = month(timestamp)) |>
  write_dataset(file.path(data_dir, "lecs_adv_cal.parquet"))
```